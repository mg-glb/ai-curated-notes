import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library
import matplotlib as mpl
import matplotlib.pyplot as plt

#Use this to better format the data plot.
mpl.style.use('ggplot')

#Retrieve the data.
df_can = pd.read_excel('https://ibm.box.com/shared/static/lw190pt9zpy5bd1ptyg2aw15awomz9pu.xlsx',
                       sheet_name='Canada by Citizenship',
                       skiprows=range(20),
                       skip_footer=2
                      )
# Clean up the data set to remove unnecessary columns (eg. REG) 
df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)
# Let us rename the columns so that they make sense
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)
# For sake of consistency, let us also make all column labels of type string
df_can.columns = list(map(str, df_can.columns))
# set the country name as index - useful for quickly looking up countries using .loc method
df_can.set_index('Country', inplace=True)
# Add total column
df_can['Total'] = df_can.sum(axis=1)
# years that we will be using in this lesson - useful for plotting later on
years = list(map(str, range(1980, 2014)))

#Prepare the subdataset
#Group countries by continents(area names) and apply sum() function, to get to totals for each year.
df_continents = df_can.groupby('Continent', axis=0).sum()


#Plot the dataset. Here are the parameters for the pie chart:
#autopct: Is a string or function used to label the wedges with their numeric value.
# The label will be placed inside the wedge.
# If it is a format string, the label will be fmt%pct.
# autopct create %, start angle represent starting point
#startangle: Rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.
#shadow: Draws a shadow beneath the pie (to give a 3D feel).
'''df_continents['Total'].plot(kind='pie',
                            figsize=(5, 6),
                            autopct='%1.1f%%', # add in percentages
                            startangle=90,     # start angle 90Â° (Africa)
                            shadow=True,       # add shadow      
                            )

plt.title('Immigration to Canada by Continent [1980 - 2013]')
plt.axis('equal') # Sets the pie chart to look like a circle.
plt.savefig('pieChart.png')'''

#The above chart generation code is not optimal. Some of the labels overlap with one another.
#To fix this let's introduce some changes:
#First define two lists containing the colors and the offsets of the labels.
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.
#Now let's pass some more parameters to the chart:
#labels=None: Turns off labels on the pie chart.
#pctdistance: Is the ratio between the center of each pie slice and the start of the text.
# This text is generated by autopct. Push out the percentages to sit just outside the pie chart.
#colors: Allows you to introduce a list of custom colors.
#explode: This parameter allows you to explode some slices.
# To do so, you must pass a list of ratios with which to offset each wedge.
# In our case we will explode the lowest 3 continents.
df_continents['Total'].plot(kind='pie',
                            figsize=(15, 6),
                            autopct='%1.1f%%', 
                            startangle=90,    
                            shadow=True,       
                            labels=None,
                            pctdistance=1.12,
                            colors=colors_list,
                            explode=explode_list
                            )
# Scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) 
plt.axis('equal')
#Remove the text labels on the pie chart by passing in legend and add it as a seperate legend.
plt.legend(labels=df_continents.index, loc='upper left')
plt.savefig('pieChart.png')